@model MyEthBook.Client.Models.EthBookViewModel
@{
    ViewBag.Title = "Index";
}

<div class="page p4" id="p1">
    <li class="icon fa fa-heart">
        <span class="title">My EthBook</span>
        <div class="container">
            <div class="row">
                <div class="col-md-6" style="font-size:20px !important;text-align:left;">
                    <table>
                        @foreach (var ca in Model.ContactAddresses)
                        {
                        <tr>
                            <td>@ca.Name</td>
                            <td>@ca.Address</td>
                        </tr>
                        }
                    </table>
                </div>
                <div class="col-md-6" style="font-size:20px !important;background-color:white;">
                    <p style="margin: 20px 0% 20px 0%;">
                        <input type="hidden" id="mmaddress" name="mmaddress" />
                        <input type="text" name="name" id="name" placeholder="name" />
                        <input type="text" name="address" id="address" placeholder="address" />
                        <input type="submit" id="add-addr" />
                        <br />
                        <a id="result-check" target="_blank"></a>
                    </p>
                </div>
            </div>
        </div>
    </li>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script type="text/javascript">
        $(document).ready(function () {

            if (typeof web3 == 'undefined') {
                alert("Please Install MetaMask if you want to use the DApp.");
            }
            $("#mmaddress").val(web3.eth.accounts[0]);

            var addr = web3.eth.accounts[0];
            $("#mmaddress").val(addr);
            console.log(addr);

            $("#add-addr").on("click", function () {

                if (!$("#name").val() || !$("#address").val()){
                    alert('Please check your inputs.');
                }
                else {
                    //TODO: make getting the ABI and contract address to be called from common place, using function ot something!!!
                    const documentRegistryContractAddress = '0x181976bb53bce865a3e7f9f2a22cb550019849bf';//'0xdd6e8a55ef29b4a4dd9a0cf3259afbd0ef4c5755';
                    const documentRegistryContractABI = [{ "constant": false, "inputs": [{ "name": "newPrice", "type": "uint256" }], "name": "changeUnlockPrice", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "email", "type": "string" }], "name": "inviteFriend", "outputs": [{ "name": "", "type": "string" }], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "name", "type": "bytes32" }, { "name": "addr", "type": "address" }], "name": "addContact", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [], "name": "getTotalInvitedCount", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "_minRefCount", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [{ "name": "index", "type": "uint256" }, { "name": "addr", "type": "address" }], "name": "getContact", "outputs": [{ "name": "", "type": "bytes32" }, { "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "name": "refOwner", "type": "address" }, { "name": "refLink", "type": "bytes32" }, { "name": "email", "type": "string" }], "name": "acceptInvitation", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [], "name": "getTotalCount", "outputs": [{ "name": "count", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [], "name": "unlockUser", "outputs": [{ "name": "", "type": "bool" }], "payable": true, "stateMutability": "payable", "type": "function" }, { "constant": false, "inputs": [{ "name": "addr", "type": "address" }, { "name": "amount", "type": "uint256" }], "name": "payPraize", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [], "name": "_owner", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "name": "index", "type": "uint256" }], "name": "deleteContact", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [{ "name": "addr", "type": "address" }], "name": "getRefferals", "outputs": [{ "name": "", "type": "string" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "name": "newMinRefCount", "type": "uint256" }], "name": "changeMinRefCount", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "refLink", "type": "bytes32" }], "name": "initUser", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [{ "name": "refOwner", "type": "address" }], "name": "getTotalInvitedAndAcceptedCount", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "_unlockPrice", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [{ "name": "addr", "type": "address" }], "name": "getMyBookCount", "outputs": [{ "name": "count", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "name": "index", "type": "uint256" }, { "name": "name", "type": "bytes32" }, { "name": "addr", "type": "address" }], "name": "editContact", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "inputs": [], "payable": false, "stateMutability": "nonpayable", "type": "constructor" }];
                        //[{ "constant": true, "inputs": [], "name": "getTotalCount", "outputs": [{ "name": "count", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [{ "name": "addr", "type": "address" }], "name": "getMyBookCount", "outputs": [{ "name": "count", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [{ "name": "index", "type": "uint256" }, { "name": "addr", "type": "address" }], "name": "getContact", "outputs": [{ "name": "", "type": "bytes32" }, { "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [{ "name": "", "type": "address" }, { "name": "", "type": "uint256" }], "name": "_ethBook", "outputs": [{ "name": "name", "type": "bytes32" }, { "name": "addr", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "name": "name", "type": "bytes32" }, { "name": "addr", "type": "address" }], "name": "addContact", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "addr", "type": "address" }, { "name": "amount", "type": "uint256" }], "name": "payPraize", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "inputs": [], "payable": false, "stateMutability": "nonpayable", "type": "constructor" }];
                    let name = $("#name").val();
                    let address = $("#address").val();
                    console.log(name + " " + address);

                    let contract = web3.eth.contract(documentRegistryContractABI).at(documentRegistryContractAddress);
                    contract.addContact(name, address, function (err, result, r1, r2, r3) {
                        if (err) {
                            console.log("ERROR");
                        }
                        console.log(err);
                        console.log(result);
                        console.log(r1);
                        console.log(r2);
                        console.log(r3);
                        console.log("ADDED");
                        if (result) {
                            $('#result-check').attr('href', 'https://ropsten.etherscan.io/tx/' + result);
                            $('#result-check').text('Check Transaction');
                        }
                    });
                }
            })
        });
    </script>
}
