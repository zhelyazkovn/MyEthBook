@using Microsoft.AspNet.Identity
@model MyEthBook.Client.Models.IndexViewModel
@{
    ViewBag.Title = "Manage";
}

<div class="page p4" id="p1">
    <li class="icon fa fa-user">
        <span class="title">My Account</span>
        <div class="container" style="font-size:15px;">
            <div class="row">
                <p>Change your account settings</p>
                <hr />
                @ViewBag.StatusMessage

                <div class="col-md-6" style="font-size:20px !important;text-align:left;">
                    <dl class="dl-horizontal">
                        <dt>Avatar:<br />Stored in the InterPlanetary File Syste</dt>
                        <dd>
                            @using (Html.BeginForm("Index", "Manage", FormMethod.Post, new { enctype = "multipart/form-data" }))
                            {
                                <div class="form-horizontal">
                                    @Html.ValidationSummary(true)


                                    <label for="file-upload" class="custom-file-upload">

                                        @if (!string.IsNullOrEmpty(Model.Avatar))
                                        {
                                            <img src="@("https://ipfs.io/ipfs/" + Model.Avatar)" width="100" />
                                        }
                                        <span class="browse">Browse</span>
                                    </label>
                                    <input id="file-upload" type="file" value="avatar" name="avatar" />

                                    <div class="col-md-12">
                                        <fieldset id="p4">
                                            <button type="submit" value="Upload" id="form-submit" class="btn"><i class="fa fa-cloud-upload"></i> Upload</button>
                                        </fieldset>
                                    </div>
                                </div>
                            }
                        </dd>
                    </dl>
                </div>
                <div class="col-md-6" style="font-size:17px !important;">
                    <dl class="dl-horizontal">
                        <dt>Email:</dt>
                        <dd>@User.Identity.GetUserName()</dd>
                        <dt>Password:</dt>
                        <dd>
                            [
                            @if (Model.HasPassword)
                            {
                                @Html.ActionLink("Change your password", "ChangePassword")
                            }
                            else
                            {
                                @Html.ActionLink("Create", "SetPassword")
                            }
                            ]
                        </dd>
                        <dt>Current Address:</dt>
                        <dd>
                            @Model.Address
                        </dd>
                        <dt>Init:</dt>
                        <dd>
                            @Model.Init
                        </dd>
                        <dt>Ref Link:</dt>
                        <dd>
                            @if (Model.Init)
                            {
                                <a class="href-white" href="@("/Account/Register?reflink=" + Model.RefLink)">@Model.RefLink</a>
                            }
                            else
                            {
                                @("Must init first")
                            }
                        </dd>
                        @if (Model.Init)
                        {
                            <dt>Invite friend</dt>
                            <dd>
                                @using (Html.BeginForm("SendInvitation", "Manage", FormMethod.Post, new { id = "form-ivitation", enctype = "multipart/form-data" }))
                                {
                                    <div class="form-horizontal">
                                        <input type="text" placeholder="email@example.com" name="Email" id="Email" />
                                        <input type="submit" value="Send" id="send-invitation-btn" />
                                    </div>
                                }
                            </dd>
                            <dt>Invited Count:</dt>
                            <dd>
                                <span id="invited-count"></span>
                            </dd>
                        }
                        <dt>Accepted Count:</dt>
                        <dd>
                            @Model.RefCount
                        </dd>
                        <dt>Unlocked:</dt>
                        <dd>
                            @Model.Unlocked
                        </dd>
                    </dl>
                </div>
            </div>
        </div>
    </li>
</div>

<script type="text/javascript">
    $(document).ready(function () {
        if (typeof web3 == 'undefined') {
            alert("Please Install MetaMask if you want to use the DApp.");
        }
        let account = web3.eth.accounts[0];
        const documentRegistryContractAddress = '0x9c3431612364Eb8f6Fe7AD91D205F014BF0349aA';
        const documentRegistryContractABI =
            [{ "constant": true, "inputs": [], "name": "unlocked", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "_owner", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "_unlockPrice", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [{ "name": "index", "type": "uint256" }, { "name": "addr", "type": "address" }], "name": "getContact", "outputs": [{ "name": "", "type": "bytes32" }, { "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [{ "name": "addr", "type": "address" }], "name": "isUnlocked", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [{ "name": "addr", "type": "address" }], "name": "getMyBookCount", "outputs": [{ "name": "count", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "getTotalCount", "outputs": [{ "name": "count", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "getTotalInvitedCount", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [{ "name": "refOwner", "type": "address" }], "name": "getTotalInvitedAndAcceptedCount", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "_minRefCount", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [{ "name": "addr", "type": "address" }], "name": "getRefferals", "outputs": [{ "name": "", "type": "string" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "name": "newPrice", "type": "uint256" }], "name": "changeUnlockPrice", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "newMinRefCount", "type": "uint256" }], "name": "changeMinRefCount", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "refLink", "type": "bytes32" }], "name": "initUser", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "email", "type": "string" }], "name": "inviteFriend", "outputs": [{ "name": "", "type": "string" }], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [], "name": "unlockUser", "outputs": [{ "name": "", "type": "bool" }], "payable": true, "stateMutability": "payable", "type": "function" }, { "constant": false, "inputs": [{ "name": "addr", "type": "address" }], "name": "transferOwner", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "refOwner", "type": "address" }, { "name": "refLink", "type": "bytes32" }, { "name": "email", "type": "string" }], "name": "acceptInvitation", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "name", "type": "bytes32" }, { "name": "addr", "type": "address" }], "name": "addContact", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "addr", "type": "address" }, { "name": "amount", "type": "uint256" }], "name": "payPraize", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "inputs": [], "payable": false, "stateMutability": "nonpayable", "type": "constructor" }, { "constant": false, "inputs": [{ "name": "index", "type": "uint256" }], "name": "deleteContact", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "index", "type": "uint256" }, { "name": "name", "type": "bytes32" }, { "name": "addr", "type": "address" }], "name": "editContact", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" }];
        let contract = web3.eth.contract(documentRegistryContractABI).at(documentRegistryContractAddress);
        let contactForm = $("#form-ivitation");
        let error = false;

        //check accepted count
        let result = contract.getTotalInvitedCount.call(function (err, result, r1, r2, r3) {
            if (err) {
                error = true;
                console.log(err)
            }
            console.log(result);
        });

        if (!error) {
            let txHash = contract.getTotalInvitedCount(function (err, r, r1, r2, r3) {
                if (err) {
                    console.log("ERROR");
                }

                console.log(err);
                console.log(r);
                console.log(r1);
                console.log(r2);
                console.log(r3);
                console.log("invitation accepted");
                if (r) {
                    $("#invited-count").html(r.toString(10));
                }
            });
        }

        // invite friend
        error = false;
        $("#send-invitation-btn").on('click', function () {
            let email = $('#Email').val();

            let result = contract.inviteFriend.call(email, function (err, result, r1, r2, r3) {
                if (err) {
                    error = true;
                    alert(err);
                }
                console.log(result);
            });

            if (!error) {
                let txHash = contract.inviteFriend(email, function (err, r, r1, r2, r3) {
                    if (err) {
                        console.log("ERROR");
                    }

                    console.log(err);
                    console.log(r);
                    console.log(r1);
                    console.log(r2);
                    console.log(r3);
                    console.log("invitation accepted");
                    if (r) {
                        contactForm.submit();
                    }
                });
            }
        });
    });
</script>